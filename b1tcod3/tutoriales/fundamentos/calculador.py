# Paso 1: Importaciones y constantes
import math

# Paso 2: Variables globales y constantes
OPERACIONES_DISPONIBLES = {
    '1': '+', '2': '-', '3': '*', '4': '/',
    '5': '^', '6': '‚àö', '7': '%'
}

# Paso 4: Funciones definidas por el usuario
def mostrar_menu():
    """
    Paso 4: Funci√≥n que muestra el men√∫ de operaciones disponibles
    Utiliza: strings, concatenaci√≥n, print()
    """
    print("\n" + "="*40)
    print("üßÆ CALCULADORA AVANZADA")
    print("="*40)
    print("Operaciones disponibles:")
    print("1. Suma (+)")
    print("2. Resta (-)")
    print("3. Multiplicaci√≥n (*)")
    print("4. Divisi√≥n (/)")
    print("5. Potencia (^)")
    print("6. Ra√≠z cuadrada (‚àö)")
    print("7. Porcentaje (%)")
    print("8. Historial")
    print("9. Salir")
    print("="*40)

def obtener_numero(mensaje):
    """
    Paso 4: Funci√≥n que obtiene un n√∫mero v√°lido del usuario
    Utiliza: Paso 6 (manejo de errores), Paso 3 (bucles while), Paso 2 (casting)
    """
    while True:  # Paso 3: Bucle while
        try:  # Paso 6: Manejo de excepciones
            entrada = input(mensaje)  # Paso 2: String
            return float(entrada)  # Paso 2: Casting a float
        except ValueError:  # Paso 6: Captura de excepciones espec√≠ficas
            print("‚ùå Error: Ingresa un n√∫mero v√°lido")

def calcular(operacion, num1, num2=None):
    """
    Paso 4: Funci√≥n que realiza el c√°lculo seg√∫n la operaci√≥n seleccionada
    Utiliza: Paso 3 (condicionales), Paso 6 (manejo de errores), Paso 2 (strings, n√∫meros)
    """
    try:  # Paso 6: Bloque try-except
        # Paso 3: Condicionales if-elif-else
        if operacion == '+':
            return num1 + num2, f"{num1} + {num2}"
        elif operacion == '-':
            return num1 - num2, f"{num1} - {num2}"
        elif operacion == '*':
            return num1 * num2, f"{num1} √ó {num2}"
        elif operacion == '/':
            if num2 == 0:  # Paso 3: Condicional anidado
                raise ZeroDivisionError("No se puede dividir por cero")  # Paso 6: Lanzar excepciones
            return num1 / num2, f"{num1} √∑ {num2}"
        elif operacion == '^':
            return num1 ** num2, f"{num1}^{num2}"
        elif operacion == '‚àö':
            if num1 < 0:  # Paso 3: Validaci√≥n con condicional
                raise ValueError("No se puede calcular ra√≠z cuadrada de n√∫mero negativo")
            return math.sqrt(num1), f"‚àö{num1}"
        elif operacion == '%':
            return (num1 * num2) / 100, f"{num1}% de {num2}"
        else:
            raise ValueError("Operaci√≥n no v√°lida")
    except Exception as e:  # Paso 6: Captura general de excepciones
        raise e

def calculadora():
    """
    Paso 4: Funci√≥n principal de la calculadora
    Utiliza: Paso 5 (listas), Paso 3 (bucles while, condicionales), Paso 6 (manejo de errores)
    """
    historial = []  # Paso 5: Lista para almacenar operaciones

    print("¬°Bienvenido a la Calculadora Avanzada!")

    while True:  # Paso 3: Bucle while principal
        mostrar_menu()

        try:  # Paso 6: Manejo de errores
            opcion = input("Selecciona una opci√≥n (1-9): ").strip()  # Paso 2: String

            # Paso 3: Condicionales if-elif-else
            if opcion == '9':
                print("¬°Gracias por usar la calculadora!")
                break  # Paso 3: Sentencia break

            elif opcion == '8':
                # Mostrar historial - Paso 5: Trabajar con listas
                if not historial:  # Paso 3: Condicional con operador l√≥gico
                    print("üìù No hay operaciones en el historial")
                else:
                    print("\nüìã Historial de operaciones:")
                    # Paso 3: Bucle for con enumerate
                    for i, (expresion, resultado) in enumerate(historial[-10:], 1):
                        print(f"{i}. {expresion} = {resultado}")
                continue  # Paso 3: Sentencia continue

            # Paso 3: Condicional con operador 'in' (pertenece a)
            if opcion in ['6']:  # Ra√≠z cuadrada
                num1 = obtener_numero("Ingresa el n√∫mero: ")
                resultado, expresion = calcular('‚àö', num1)
            else:
                # Operaciones que requieren dos n√∫meros
                num1 = obtener_numero("Ingresa el primer n√∫mero: ")
                num2 = obtener_numero("Ingresa el segundo n√∫mero: ")

                # Paso 5: Diccionario para mapear opciones a operaciones
                operaciones = {
                    '1': '+', '2': '-', '3': '*', '4': '/',
                    '5': '^', '7': '%'
                }

                # Paso 3: Condicional con operador 'not in'
                if opcion not in operaciones:
                    print("‚ùå Opci√≥n no v√°lida")
                    continue

                operacion = operaciones[opcion]  # Paso 5: Acceso a diccionario
                resultado, expresion = calcular(operacion, num1, num2)

            # Mostrar resultado
            print(f"\n‚úÖ Resultado: {expresion} = {resultado}")

            # Paso 5: Agregar tupla al historial (combinando lista con tupla)
            historial.append((expresion, resultado))

        except Exception as e:  # Paso 6: Captura de excepciones
            print(f"‚ùå Error: {str(e)}")
            continue

        # Paso 3: Condicional con operador de comparaci√≥n
        continuar = input("\n¬øQuieres realizar otra operaci√≥n? (s/n): ").lower()
        if continuar != 's':
            print("¬°Hasta luego!")
            break

def calculadora():
    """
    Paso 4: Funci√≥n principal de la calculadora
    Utiliza: Paso 5 (listas), Paso 3 (bucles while, condicionales), Paso 6 (manejo de errores)
    """
    historial = []  # Paso 5: Lista para almacenar operaciones

    print("¬°Bienvenido a la Calculadora Avanzada!")

    while True:  # Paso 3: Bucle while principal
        mostrar_menu()

        try:  # Paso 6: Manejo de errores
            opcion = input("Selecciona una opci√≥n (1-9): ").strip()  # Paso 2: String

            # Paso 3: Condicionales if-elif-else
            if opcion == '9':
                print("¬°Gracias por usar la calculadora!")
                break  # Paso 3: Sentencia break

            elif opcion == '8':
                # Mostrar historial - Paso 5: Trabajar con listas
                if not historial:  # Paso 3: Condicional con operador l√≥gico
                    print("üìù No hay operaciones en el historial")
                else:
                    print(f"\nüìã Historial de operaciones ({len(historial)} total):")
                    # Mostrar √∫ltimas 10 operaciones
                    for i, (expresion, resultado) in enumerate(historial[-10:], len(historial)-9):
                        print(f"{i}. {expresion} = {resultado}")
                continue  # Paso 3: Sentencia continue

            # Paso 3: Condicional con operador 'in' (pertenece a)
            if opcion in ['6']:  # Ra√≠z cuadrada
                num1 = obtener_numero("Ingresa el n√∫mero: ")
                resultado, expresion = calcular('‚àö', num1)
            else:
                # Operaciones que requieren dos n√∫meros
                num1 = obtener_numero("Ingresa el primer n√∫mero: ")
                num2 = obtener_numero("Ingresa el segundo n√∫mero: ")

                # Paso 5: Diccionario para mapear opciones a operaciones
                operaciones = {
                    '1': '+', '2': '-', '3': '*', '4': '/',
                    '5': '^', '7': '%'
                }

                # Paso 3: Condicional con operador 'not in'
                if opcion not in operaciones:
                    print("‚ùå Opci√≥n no v√°lida")
                    continue

                operacion = operaciones[opcion]  # Paso 5: Acceso a diccionario
                resultado, expresion = calcular(operacion, num1, num2)

            # Mostrar resultado
            print(f"\n‚úÖ Resultado: {expresion} = {resultado}")

            # Paso 5: Agregar tupla al historial (combinando lista con tupla)
            historial.append((expresion, resultado))

        except Exception as e:  # Paso 6: Captura de excepciones
            print(f"‚ùå Error: {str(e)}")
            continue

        # Paso 3: Condicional con operador de comparaci√≥n
        continuar = input("\n¬øQuieres realizar otra operaci√≥n? (s/n): ").lower()
        if continuar != 's':
            print("¬°Hasta luego!")
            break

# Paso 3: Condicional para ejecutar solo cuando se llama directamente
if __name__ == "__main__":
    calculadora()